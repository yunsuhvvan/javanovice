*상속 
- 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것.
- 생성자와 초기화 블럭은 상속되지 않는다 멤버만 상속된다.
- 자손 클래스의 멤버 개수는 조상 클래스보다 항상 같거나 많다.

*클래스관의 관계- 포함관계
- 클래스간의 포함관계를 맺어주는 것은  한 클래스의 멤버변수로 다른 클래스 타입이 참조변수를 선언하는 것을 뜻한다.
- Circle is a Point or Circle ahs a Point  // *대부분 90%가 포함 관계라고 함*

*오버라이딩
- 조상 클래스로부터 상속 받은 메서드의 내용을 변경하는 것을 오버라이딩이라고한다. 사전적의미는 ~위에 덮어쓰다
*오버라이딩의 조건
  1) 이름이 같아야한다
  2) 매개변수가 같아야한다
  3) 반환타입이 같아야한다.
     1. 접근 제어자는 조상 클래스의 메서드보다 좁은 범위로 변경할 수 없다
     2. 조상클래스의 메서드보다 많은 수의 예외를 선언할 수 없다.
     
     
 *this와 super : 참조변수인 동시에 지역변수.. 구별하기 위해 사용된다
 
 * 접근 제어자 
 public   >     protected       >  default  >     private
 전부    같은패키지,자손클래스    같은패키지     같은 클래스
 
 
 * 다형성 
 - 여러가지 형태를 가질 수 있는 능력, 조상클래스 타입의 참조변수로 자손 클래스의 인스턴스를 참조할 수 있다.  
 Tv t = new CatptionTv();  //가능
 CaptionTv c = new Tv();   //불가능
 
* 참조변수의 형변환

- 형변환은 참조변수의 타입을 변환하는 것이지 인스턴스를 변환하는것은 아니기 때문에 참조변수의 형변환은
   인스턴스에 아무런 영향을 미치지 않는다.
   단지  참조변수의 형변환을 통해서, 참조하고 있는 있는 인스턴스에서 사용할 수 있는 멤버의 개수를 조절하는 것 뿐이다.


* 매개변수의 다형성

- 참조변수의 다형적인 특징은 매개변수에도 적용이 된다.
- 매개변수가 조상타입의 참조변수라는 것은 메서드의 매개변수로 "조상클래스"의 자손타입의 참조변수면 어느 것이나 매개변수로 받아들일 수 있다는 뜻이다.


* 추상 클래스
- 추상 클래스는 미완성 설계도
- 클래스가 미완성이라는 것은 멤버의 개수에 관계된 것이 아니라, 단지 추상 메서드를 포함하고 있다는 의미이다.
- 미완성 설계도로 완성된 제품을 만들 수 없듯이 추상클래스로는 인스턴스는 생성할 수 없다. (추상클래스는 상속을 통해서 자손 클래스에 의해서만 완성이 될 수 있다.)
- 클래스 선언부의 abstact를 보고 이 클래스에는 추상 메서드가 있으니 상속을 통해서 구현해주어야 한다는 것을 알아차려야한다.
- 추상 클래스는 추상 메서드를 포함하고 있다는 것을 제외하고는 일반 클래스와 전혀 다르지 않다. 추상 클래스에도 생성자가 있으며 , 멤버변수와 메서드도 가질 수 있다.

* 추상메서드
- abstact 리턴타입 메서드이름();  // 주석을 통해 어떤 기능을 수행할 목적으로작성하였는지 나타내기
추상클래스로부터 상속 받는 자손 클래스는 오버라이딩을 통해 조상인 추상클래스의 추상 메서드를 모두 구현해줘야한다.

* 인터페이스
- 추상화 정도 :  [인터페이스 > 추상클래스]
- 추상 클래스와 달리 몸통을 갖춘 일반 메서드 또는 멤버변수를 구성원으로 가질 수 없다.
- 오직 추상메서드와 상수만을 멤버로 가질 수 있고 그외의 다른 어떠한 요소도 허용하지 않는다.

*작성
- 모든 멤버변수는 public static final 이어야 하며 , 이를 생략할 수 있음
- 모든 메서드는 public abstract 이여야 하며, 이를 생략할 수 있음

* 구현
-만일 구현하는 인터페이스의 메서드 중 일부만 구현한다면, abstract를 붙혀 추상 클래스로 선언하여야한다.
 (abstract class Fighter implements Fightable)..
 - 상속과 구현도 동시에 가능
  (class Fighter extends Unit implemets Fightable)

* 인터페이스를 이용한 다형성
- 인터페이스 타입의 매개변수가 갖는 의미는 메서드 호출 시 해당 인터페이스를 구현한 클래스의 인스턴스를 매개변수로 제공해야한다는 것이다.
- 리턴타입이 인터페이스라는 것은 메서드가 해당 인터페이스를 구현한 클래스의 인스턴스를 반환한다는 것을 의미한다.

*인터페이스의 장점 
- 개발시간을 단축시킬 수 있다.
- 표준화가 가능하다
- 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
- 독립적인 프로그래밍이 가능하다.
